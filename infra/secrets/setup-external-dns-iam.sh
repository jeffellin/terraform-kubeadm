#!/bin/bash
set -e

# Use 1Password AWS plugin
aws() {
  op plugin run -- aws "$@"
}

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CREDENTIALS_FILE="$SCRIPT_DIR/aws-credentials"

IAM_USER_NAME="external-dns-r53"
IAM_POLICY_NAME="external-dns-route53-policy"
AWS_REGION="us-east-1"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

print_success() {
  echo -e "${GREEN}✓${NC} $1"
}

print_error() {
  echo -e "${RED}✗${NC} $1"
}

print_warning() {
  echo -e "${YELLOW}⚠${NC} $1"
}

cleanup_resources() {
  echo "Cleaning up IAM resources for external-dns..."

  # List and delete access keys
  echo "Deleting access keys for user: $IAM_USER_NAME"
  ACCESS_KEYS=$(aws iam list-access-keys --user-name "$IAM_USER_NAME" --query 'AccessKeyMetadata[].AccessKeyId' --output text 2>/dev/null || echo "")
  if [ -n "$ACCESS_KEYS" ]; then
    for key in $ACCESS_KEYS; do
      aws iam delete-access-key --user-name "$IAM_USER_NAME" --access-key-id "$key" 2>/dev/null || true
      print_success "Deleted access key: $key"
    done
  fi

  # Detach and delete policy
  echo "Detaching and deleting policy: $IAM_POLICY_NAME"
  POLICY_ARN=$(aws iam list-policies --scope Local --query "Policies[?PolicyName=='$IAM_POLICY_NAME'].Arn" --output text 2>/dev/null || echo "")
  if [ -n "$POLICY_ARN" ]; then
    aws iam detach-user-policy --user-name "$IAM_USER_NAME" --policy-arn "$POLICY_ARN" 2>/dev/null || true
    print_success "Detached policy from user"

    aws iam delete-policy --policy-arn "$POLICY_ARN" 2>/dev/null || true
    print_success "Deleted policy: $IAM_POLICY_NAME"
  fi

  # Delete user
  echo "Deleting IAM user: $IAM_USER_NAME"
  aws iam delete-user --user-name "$IAM_USER_NAME" 2>/dev/null || true
  print_success "Deleted user: $IAM_USER_NAME"

  echo ""
  print_success "Cleanup complete!"
  echo ""
  print_warning "Note: The aws-credentials file has NOT been deleted. Remove it manually if needed."
  exit 0
}

create_resources() {
  echo "Setting up IAM resources for external-dns..."
  echo ""

  # Check if user already exists
  if aws iam get-user --user-name "$IAM_USER_NAME" &>/dev/null; then
    print_error "IAM user '$IAM_USER_NAME' already exists!"
    echo "Run with --delete to clean up existing resources first, or use a different user name."
    exit 1
  fi

  # Create IAM user
  echo "Creating IAM user: $IAM_USER_NAME"
  aws iam create-user --user-name "$IAM_USER_NAME" --tags Key=Purpose,Value=external-dns Key=ManagedBy,Value=script > /dev/null
  print_success "Created IAM user: $IAM_USER_NAME"

  # Create IAM policy for Route53
  echo "Creating IAM policy: $IAM_POLICY_NAME"
  POLICY_DOCUMENT='{
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": [
          "route53:ChangeResourceRecordSets"
        ],
        "Resource": [
          "arn:aws:route53:::hostedzone/*"
        ]
      },
      {
        "Effect": "Allow",
        "Action": [
          "route53:GetChange",
          "route53:ListHostedZones",
          "route53:ListResourceRecordSets"
        ],
        "Resource": [
          "*"
        ]
      }
    ]
  }'

  POLICY_ARN=$(aws iam create-policy \
    --policy-name "$IAM_POLICY_NAME" \
    --policy-document "$POLICY_DOCUMENT" \
    --description "Policy for external-dns to manage Route53 records" \
    --query 'Policy.Arn' \
    --output text)
  print_success "Created IAM policy: $IAM_POLICY_NAME"

  # Attach policy to user
  echo "Attaching policy to user..."
  aws iam attach-user-policy --user-name "$IAM_USER_NAME" --policy-arn "$POLICY_ARN"
  print_success "Attached policy to user"

  # Create access key
  echo "Creating access key..."
  ACCESS_KEY_OUTPUT=$(aws iam create-access-key --user-name "$IAM_USER_NAME")
  ACCESS_KEY_ID=$(echo "$ACCESS_KEY_OUTPUT" | grep -o '"AccessKeyId": "[^"]*"' | cut -d'"' -f4)
  SECRET_ACCESS_KEY=$(echo "$ACCESS_KEY_OUTPUT" | grep -o '"SecretAccessKey": "[^"]*"' | cut -d'"' -f4)
  print_success "Created access key"

  # Prompt for Route53 hosted zone ID
  echo ""
  echo "Enter your Route53 Hosted Zone ID (leave blank to retrieve it automatically):"
  read -r ZONE_INPUT

  if [ -z "$ZONE_INPUT" ]; then
    echo "Fetching hosted zones..."
    aws route53 list-hosted-zones --query 'HostedZones[].[Id,Name]' --output table
    echo ""
    echo "Enter the Hosted Zone ID from the list above:"
    read -r ZONE_INPUT
  fi

  # Clean zone ID (remove /hostedzone/ prefix if present)
  R53_ZONE=$(echo "$ZONE_INPUT" | sed 's|/hostedzone/||')

  # Create/update credentials file
  echo ""
  echo "Writing credentials to: $CREDENTIALS_FILE"
  cat > "$CREDENTIALS_FILE" <<EOF
# AWS Credentials for Route53
# Generated by setup-external-dns-iam.sh on $(date)

AWS_ACCESS_KEY_ID=$ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY
AWS_REGION=$AWS_REGION
R53_ZONE=$R53_ZONE
EOF

  chmod 600 "$CREDENTIALS_FILE"
  print_success "Credentials file created"

  echo ""
  print_success "Setup complete!"
  echo ""
  echo "IAM Resources Created:"
  echo "  - User: $IAM_USER_NAME"
  echo "  - Policy: $IAM_POLICY_NAME"
  echo "  - Access Key: $ACCESS_KEY_ID"
  echo ""
  echo "Credentials saved to: $CREDENTIALS_FILE"
  echo ""
  echo "Next steps:"
  echo "  1. Run ../secrets/create-aws-secret.sh to create Kubernetes secrets"
  echo "  2. Deploy external-dns using the install script"
  echo ""
  echo "To remove these resources later, run:"
  echo "  $0 --delete"
}

# Main script
if [ "$1" == "--delete" ] || [ "$1" == "--cleanup" ]; then
  cleanup_resources
else
  create_resources
fi
